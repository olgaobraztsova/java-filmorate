DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS mpa_ratings CASCADE;
DROP TABLE IF EXISTS friendships CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS films_and_genres CASCADE;
DROP TABLE IF EXISTS users CASCADE;

CREATE TABLE IF NOT EXISTS mpa_ratings(
	rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	rating_code VARCHAR(10) NOT NULL UNIQUE CHECK (rating_code IN ('G', 'PG', 'PG-13', 'R', 'NC-17'))
	--rating_description VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS films(
	film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	title VARCHAR(50) NOT NULL,
	description VARCHAR(255),
	release_date DATE,
	duration INTEGER,
	mpa_rating_id INTEGER REFERENCES mpa_ratings(rating_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS genres (
	genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	genre_name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films_and_genres (
	film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE,
	genre_id INTEGER REFERENCES genres(genre_id) ON DELETE CASCADE,
	PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users (
	user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	email VARCHAR(50) NOT NULL,
	login VARCHAR(50) NOT NULL,
	name VARCHAR(50) NOT NULL,
	birthday DATE
);

CREATE TABLE IF NOT EXISTS likes (
	film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE,
	user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
	PRIMARY KEY(film_id, user_id)
);

CREATE TABLE IF NOT EXISTS friendships(
	user_id integer REFERENCES users (user_id) ON DELETE CASCADE,
	friend_id integer REFERENCES users (user_id) ON DELETE CASCADE,
	PRIMARY KEY(user_id, friend_id)
);
